local colour = require('synful.colour')

--> resolves semantic highlighting for lsp servers
local links = {
  ['@lsp.type.namespace'] = '@namespace',
  ['@lsp.type.type'] = '@type',
  ['@lsp.type.class'] = '@type',
  ['@lsp.type.enum'] = '@type',
  ['@lsp.type.interface'] = '@type',
  ['@lsp.type.struct'] = '@structure',
  ['@lsp.type.parameter'] = '@parameter',
  ['@lsp.type.variable'] = '@variable',
  ['@lsp.type.property'] = '@property',
  ['@lsp.type.enumMember'] = '@constant',
  ['@lsp.type.function'] = '@function',
  ['@lsp.type.method'] = '@method',
  ['@lsp.type.macro'] = '@macro',
  ['@lsp.type.decorator'] = '@function',
  ['@text.literal.vimdoc'] = '@function'
}

for newgroup, oldgroup in pairs(links) do
  vim.api.nvim_set_hl(0, newgroup, { link = oldgroup, default = true })
end

return {
  Bold                                = { bold = true },
  Boolean                             = { fg = colour.mauve, bold = true },
  Character                           = { fg = colour.mauve },
  CmpCompletionBorder                 = { link = 'FloatBorder' },
  CmpItemAbbrMatch                    = { link = 'Noise' },
  CmpItemAbbrMatchDefault             = { link = 'Todo' },
  CmpItemAbbrMatchFuzzy               = { link = 'Todo' },
  CmpItemAbbrMatchFuzzyDefault        = { link = 'Todo' },
  CmpItemKindColor                    = { link = 'Title' },
  CmpItemKindConstant                 = { link = 'Macro' },
  CmpItemKindDefault                  = { link = 'Macro' },
  CmpItemKindFolder                   = { link = 'Return' },
  CmpItemKindFunction                 = { link = 'Noise' },
  CmpItemKindKeyword                  = { link = 'luaBraces' },
  CmpItemKindMatchFuzzy               = { link = 'Todo' },
  CmpItemKindMethod                   = { link = 'Noise' },
  CmpItemKindOperator                 = { link = 'Title' },
  CmpItemKindProperty                 = { link = 'Noise' },
  CmpItemKindVariable                 = { link = 'String' },
  CmpItemMenu                         = { link = 'Todo' },
  CodeiumSuggestion                   = { link = 'PreProc' },
  ColorColumn                         = { link = 'NonText' },
  Command                             = { link = 'Macro' },
  Comment                             = { fg = colour.metal, italic = true, bold = true },
  Conceal                             = { fg = colour.paris },
  Conditional                         = { link = 'Macro' },
  Constant                            = { link = 'Macro' },
  Cursor                              = { fg = colour.pearl },
  CursorLine                          = { bg = 'NONE' },
  CursorLineNr                        = { fg = colour.bazil, bg = 'NONE', bold = true },
  Debug                               = { link = 'Noise' },
  Define                              = { link = 'Macro' },
  Delimiter                           = { link = 'luaBraces' },
  DiagnosticError                     = { link = 'Noise' },
  DiagnosticHint                      = { link = 'Character' },
  DiagnosticInfo                      = { link = 'Todo' },
  DiagnosticUnderlineError            = { fg = colour.rouge, undercurl = true },
  DiagnosticUnderlineHint             = { fg = colour.bazil, undercurl = true },
  DiagnosticUnderlineInfo             = { fg = colour.pearl, undercurl = true },
  DiagnosticUnderlineWarn             = { fg = colour.amber, undercurl = true },
  DiagnosticVirtualTextError          = { fg = colour.rouge, bg = colour.blush },
  DiagnosticVirtualTextHint           = { fg = colour.paris, bg = colour.green },
  DiagnosticVirtualTextInfo           = { fg = colour.pearl, bg = colour.stone },
  DiagnosticVirtualTextWarn           = { fg = colour.amber, bg = colour.orang },
  DiagnosticWarn                      = { link = 'Tag' },
  DiffAdd                             = { link = 'String' },
  DiffChange                          = { link = 'luaBraces' },
  DiffDelete                          = { link = 'Noise' },
  DiffText                            = { link = 'Macro' },
  Directory                           = { link = 'keyword' },
  EndOfBuffer                         = { link = 'StatusLineNC' },
  Error                               = { link = 'Noise' },
  ErrorMsg                            = { link = 'Noise' },
  Exception                           = { link = 'Include' },
  Field                               = { link = 'Title' },
  Float                               = { link = 'Noise' },
  FloatBorder                         = { fg = colour.raven },
  FloatShadow                         = { link = 'NonText' },
  FloatShadowThrough                  = { link = 'NonText' },
  FoldColumn                          = { link = 'Noise' },
  Folded                              = { link = 'Comment', bold = true },
  Function                            = { fg = colour.pearl, bold = true },
  GitGutterAdd                        = { link = 'KeywordReturn' },
  GitGutterChange                     = { link = 'luaBraces' },
  GitGutterChangeDelete               = { link = 'Tag' },
  GitGutterDelete                     = { link = 'Noise' },
  Identifier                          = { link = 'Title' },
  Ignore                              = { link = 'luaBraces' },
  IncSearch                           = { link = 'Visual' },
  Include                             = { fg = colour.royal, bold = true },
  Italic                              = { italic = true },
  KeywordFunction                     = { link = 'Macro' },
  KeywordReturn                       = { fg = colour.olive },
  Label                               = { link = 'Macro' },
  LazyCommit                          = { link = 'Noise' },
  LazyDimmed                          = { link = 'Tag' },
  LazyNormal                          = { link = 'pmenu' },
  LazyProp                            = { link = 'Character' },
  LeapLabelPrimary                    = { link = 'MatchParen' },
  LeapLabelSecondary                  = { link = 'Operator' },
  LeapLabelSelected                   = { link = 'Search' },
  LeapMatch                           = { link = 'MatchParen' },
  LineNr                              = { fg = colour.stone },
  Macro                               = { fg = colour.royal },
  MatchParen                          = { fg = colour.rouge, bold = true, underline = true },
  Noise                               = { fg = colour.mauve },
  NonText                             = { fg = 'NONE', bg = 'NONE' },
  Normal                              = { fg = colour.pearl },
  NormalFloat                         = { fg = colour.pearl, bg = 'NONE' },
  NotifyDEBUGBody                     = { link = 'Normal' },
  NotifyDEBUGBorder                   = { link = 'FloatBorder' },
  NotifyDEBUGIcon                     = { link = 'luaBraces' },
  NotifyDEBUGTitle                    = { link = 'luaBraces' },
  NotifyERRORBody                     = { link = 'Normal' },
  NotifyERRORBorder                   = { link = 'FloatBorder' },
  NotifyERRORIcon                     = { link = 'Noise' },
  NotifyERRORTitle                    = { link = 'Noise' },
  NotifyINFOBody                      = { link = 'Normal' },
  NotifyINFOBorder                    = { link = 'FloatBorder' },
  NotifyINFOIcon                      = { link = 'String' },
  NotifyINFOTitle                     = { link = 'String' },
  NotifyTRACEBody                     = { link = 'Normal' },
  NotifyTRACEBorder                   = { link = 'FloatBorder' },
  NotifyTRACEIcon                     = { link = 'gitcommitNoBranch' },
  NotifyTRACETitle                    = { link = 'gitcommitNoBranch' },
  NotifyWARNBody                      = { link = 'Normal' },
  NotifyWARNBorder                    = { link = 'FloatBorder' },
  NotifyWARNIcon                      = { link = 'Tag' },
  NotifyWARNTitle                     = { link = 'Tag' },
  Number                              = { link = 'Noise' },
  NvimInternalError                   = { link = 'Noise' },
  Operator                            = { fg = colour.amber, bold = true },
  Pmenu                               = { link = 'NormalFloat' },
  PmenuSbar                           = { link = 'Title' },
  PmenuSel                            = { fg = colour.slate, bg = colour.raven, bold = true },
  PmenuThumb                          = { fg = colour.mauve, bg = 'NONE' },
  PreCondit                           = { link = 'luaBraces' },
  PreProc                             = { fg = colour.slate },
  Repeat                              = { link = 'Return' },
  Return                              = { fg = colour.bazil, bold = true },
  Search                              = { fg = colour.ultra, bg = colour.steel, bold = true },
  SignColumn                          = { link = 'luaBraces' },
  Special                             = { link = 'Macro' },
  SpecialChar                         = { link = 'Noise' },
  SpecialComment                      = { link = 'Comment' },
  SpecialKey                          = { link = 'Macro' },
  SpellBad                            = { link = 'Noise' },
  SpellCap                            = { link = 'luaBraces' },
  SpellLocal                          = { link = 'Tag' },
  SpellRare                           = { link = 'Include' },
  Statement                           = { link = 'Include' },
  StatusLine                          = { link = 'NonText' },
  StatusLineNC                        = { fg = colour.space, bg = 'NONE' },
  StorageClass                        = { link = 'Noise' },
  String                              = { fg = colour.paris, italic = true },
  Structure                           = { link = 'Title' },
  Substitute                          = { link = 'Title' },
  TabLine                             = { fg = '#000000' },
  TabLineFill                         = { link = 'Normal' },
  TabLineSel                          = { link = 'mailSubject' },
  Tag                                 = { fg = colour.amber },
  TelescopeBorder                     = { link = 'FloatBorder' },
  TelescopeMatching                   = { link = 'Todo' },
  TelescopePreviewMatch               = { link = 'MatchParen' },
  TelescopePromptPrefix               = { link = 'Noise' },
  TelescopePromptTitle                = { link = 'Macro' },
  TelescopeSelection                  = { link = 'PmenuSel' },
  TelescopeSelectionCaret             = { link = 'PmenuSel' },
  Title                               = { fg = colour.pearl },
  Todo                                = { fg = colour.capri },
  Type                                = { link = 'String' },
  Typedef                             = { link = 'luaBraces' },
  Underlined                          = { underline = true },
  VertSplit                           = { link = 'NonText' },
  Visual                              = { fg = colour.capri, bg = colour.steel, bold = true },
  VisualNOS                           = { link = 'Title' },
  WarningMsg                          = { link = 'luaBraces' },
  Whitespace                          = { link = 'Todo' },
  WildMenu                            = { fg = colour.rouge, bg = colour.capri },
  constructor                         = { link = 'PreProc' },
  cssAttrRegion                       = { link = 'Todo' },
  cssInteractProp                     = { link = 'PreProc' },
  cssBackgroundProp                   = { link = 'PreProc' },
  cssBorderProp                       = { link = 'PreProc' },
  cssBoxProp                          = { link = 'PreProc' },
  cssBraces                           = { link = 'luaBraces' },
  cssClassName                        = { link = 'Macro' },
  cssClassNameDot                     = { link = 'Noise' },
  cssColorProp                        = { link = 'PreProc' },
  cssDefinition                       = { link = 'PreProc' },
  cssFlexibleBoxProp                  = { link = 'PreProc' },
  cssFontAttr                         = { link = 'Todo' },
  cssFontProp                         = { link = 'PreProc' },
  cssFunctionName                     = { link = 'Todo' },
  cssGradientAttr                     = { link = 'Todo' },
  cssIEUIProp                         = { link = 'PreProc' },
  cssListProp                         = { link = 'PreProc' },
  cssMediaProp                        = { link = 'PreProc' },
  cssNoise                            = { link = 'luaBraces' },
  cssPageProp                         = { link = 'PreProc' },
  cssPositioningProp                  = { link = 'PreProc' },
  cssPseudoClass                      = { link = 'luaBraces' },
  cssPseudoClassId                    = { link = 'Todo' },
  cssTagName                          = { fg = colour.mauve, bold = true },
  cssTextProp                         = { link = 'PreProc' },
  cssTransformProp                    = { link = 'PreProc' },
  cssTransitionProp                   = { link = 'PreProc' },
  cssUIProp                           = { link = 'PreProc' },
  cssVendor                           = { link = 'Character' },
  diffAdded                           = { link = 'KeywordReturn' },
  diffRemoved                         = { link = 'Noise' },
  gitcommitBranch                     = { link = 'Noise' },
  gitcommitComment                    = { link = 'Comment' },
  gitcommitDiscarded                  = { link = 'luaBraces' },
  gitcommitDiscardedArrow             = { link = 'Noise' },
  gitcommitDiscardedFile              = { link = 'Noise' },
  gitcommitDiscardedType              = { link = 'Noise' },
  gitcommitNoBranch                   = { link = 'Noise' },
  gitcommitOverflow                   = { link = 'Noise' },
  gitcommitSelected                   = { link = 'luaBraces' },
  gitcommitSelectedArrow              = { link = 'KeywordReturn' },
  gitcommitSelectedFile               = { link = 'KeywordReturn' },
  gitcommitSelectedType               = { link = 'KeywordReturn' },
  gitcommitSummary                    = { link = 'Title' },
  gitcommitUnmerged                   = { link = 'KeywordReturn' },
  gitcommitUnmergedArrow              = { link = 'luaBraces' },
  gitcommitUnmergedFile               = { link = 'luaBraces' },
  gitcommitUntracked                  = { link = 'luaBraces' },
  gitcommitUntrackedFile              = { link = 'Macro' },
  htmlArg                             = { link = 'Todo' },
  htmlEndTag                          = { link = 'luaBraces' },
  htmlHead                            = { link = 'Macro' },
  htmlSpecialTagName                  = { link = 'Macro' },
  htmlTag                             = { link = 'Todo' },
  htmlTagN                            = { link = 'Include' },
  htmlTagName                         = { link = 'Include' },
  javaScriptBraces                    = { link = 'luaBraces' },
  javaScriptNumber                    = { link = 'Number' },
  javaScriptParens                    = { link = 'luaBraces' },
  javaScriptStatement                 = { link = 'KeywordReturn' },
  javaScriptStringT                   = { link = 'Comment' },
  jsArrowFunction                     = { link = 'luaBraces' },
  jsAsyncKeyword                      = { link = 'Noise' },
  jsBrackets                          = { link = 'luaBraces' },
  jsDestructuringBraces               = { link = 'luaBraces' },
  jsExport                            = { link = 'Macro' },
  jsForAwait                          = { link = 'Noise' },
  jsFrom                              = { link = 'Include' },
  jsFuncArgs                          = { link = 'Todo' },
  jsFuncArgsCommas                    = { link = 'luaBraces' },
  jsFuncBlock                         = { link = 'Todo' },
  jsFuncBraces                        = { link = 'luaBraces' },
  jsFuncCall                          = { link = 'Title' },
  jsFuncName                          = { link = 'Title' },
  jsFuncParens                        = { link = 'luaBraces' },
  jsFunction                          = { link = 'Macro' },
  jsGlobalObjects                     = { link = 'keyword' },
  jsImport                            = { link = 'Macro' },
  jsModuleBraces                      = { link = 'luaBraces' },
  jsModuleComma                       = { link = 'luaBraces' },
  jsNoise                             = { link = 'Noise' },
  jsNull                              = { link = 'Noise' },
  jsObject                            = { link = 'Todo' },
  jsObjectBraces                      = { link = 'luaBraces' },
  jsObjectColon                       = { link = 'luaBraces' },
  jsObjectKey                         = { link = 'Todo' },
  jsObjectObjectProp                  = { link = 'Noise' },
  jsObjectSeparator                   = { link = 'luaBraces' },
  jsObjectShorthandProp               = { link = 'luaBraces' },
  jsObjectValue                       = { link = 'Title' },
  jsOperator                          = { link = 'luaBraces' },
  jsOperatorKeyword                   = { fg = colour.bazil, bold = true },
  jsParen                             = { link = 'luaBraces' },
  jsParens                            = { link = 'luaBraces' },
  jsReturn                            = { link = 'Return' },
  jsStorageClass                      = { link = 'Macro' },
  jsTemplateBraces                    = { link = 'Noise' },
  jsTemplateString                    = { link = 'luaBraces' },
  jsTernaryIf                         = { link = 'Noise' },
  jsTernaryOperator                   = { link = 'Noise' },
  jsonQuote                           = { link = 'Macro' },
  jsoncBoolean                        = { link = 'Boolean' },
  jsoncBraces                         = { link = 'luaBraces' },
  jsxAttrib                           = { link = 'Todo' },
  jsxBraces                           = { link = 'luaBraces' },
  jsxCloseComponentName               = { link = 'Macro' },
  jsxClosePunct                       = { link = 'luaBraces' },
  jsxCloseString                      = { link = 'luaBraces' },
  jsxCloseTag                         = { link = 'luaBraces' },
  jsxCloseTagName                     = { link = 'Macro' },
  jsxComponentName                    = { link = 'Keyword' },
  jsxDot                              = { link = 'Noise' },
  jsxEqual                            = { link = 'luaBraces' },
  jsxEscJs                            = { link = 'Title' },
  jsxExpressionBlock                  = { link = 'Normal' },
  jsxJsBlock                          = { link = 'Noise' },
  jsxOpenPunct                        = { link = 'luaBraces' },
  jsxOpenTag                          = { link = 'luaBraces' },
  jsxRegion                           = { link = 'Title' },
  jsxString                           = { link = 'String' },
  jsxTag                              = { link = 'luaBraces' },
  jsxTagName                          = { link = 'Keyword' },
  keyword                             = { fg = colour.steel, bold = true },
  luaBraces                           = { fg = colour.stone },
  luaBuiltIn                          = { link = 'Macro' },
  luaComma                            = { link = 'luaBraces' },
  luaCondStart                        = { link = 'LineNr' },
  luaConstant                         = { link = 'Noise' },
  luaErrHand                          = { link = 'Include' },
  luaFunc                             = { link = 'Macro' },
  luaFuncArgsComma                    = { link = 'luaBraces' },
  luaFuncCall                         = { link = 'Macro' },
  luaFuncName                         = { link = 'Title' },
  luaFuncParens                       = { link = 'luaBraces' },
  luaFunction                         = { link = 'Macro' },
  luaFunctionBlock                    = { link = 'Include' },
  luaIn                               = { link = 'Include' },
  luaKeyword                          = { link = 'Return' },
  luaLocal                            = { link = 'Return' },
  luaNoise                            = { link = 'Noise' },
  luaOperator                         = { link = 'cssTagName' },
  luaParen                            = { link = 'luaBraces' },
  luaParens                           = { link = 'luaBraces' },
  luaSpecialValue                     = { link = 'Macro' },
  luaStatement                        = { link = 'Return' },
  luaString                           = { link = 'String' },
  luaStringLongTag                    = { link = 'luaBraces' },
  luaSymbolOperator                   = { link = 'luaBraces' },
  luaTable                            = { link = 'LineNr' },
  luaTableBlock                       = { link = 'luaBraces' },
  mailHeader                          = { link = 'Noise' },
  mailHeaderKey                       = { link = 'Noise' },
  mailSubject                         = { fg = colour.slate, bold = true },
  markdownH1                          = { link = 'Macro' },
  markdownLinkText                    = { link = 'Todo' },
  markdownLinkTextDelimiter           = { link = 'luaBraces' },
  markdownValid                       = { link = 'luaBraces' },
  mkdNonListItemBlock                 = { link = 'Noise' },
  muttrcAliasEncEmail                 = { link = 'luaBraces' },
  muttrcAliasKey                      = { link = 'Noise' },
  muttrcAliasNameNoParens             = { link = 'Title' },
  muttrcColor                         = { link = 'Return' },
  muttrcEmail                         = { link = 'Return' },
  muttrcSetStrAssignment              = { link = 'Noise' },
  rubyStringDelimiter                 = { link = 'String' },
  rustAssert                          = { link = 'Noise' },
  rustBoxPlacementBalance             = { link = 'Noise' },
  rustCharacter                       = { link = 'Noise' },
  rustConditional                     = { link = 'Keyword' },
  rustEnumVariant                     = { link = 'Title' },
  rustFoldBraces                      = { link = 'luaBraces' },
  rustFuncCall                        = { link = 'Title' },
  rustFuncName                        = { link = 'Title' },
  rustIdentifier                      = { link = 'Title' },
  rustKeyword                         = { link = 'Keyword' },
  rustMacro                           = { link = 'Return' },
  rustModPath                         = { link = 'Return' },
  rustModPathSep                      = { link = 'luaBraces' },
  rustOperator                        = { link = 'luaBraces' },
  rustRepeat                          = { link = 'Keyword' },
  rustSelf                            = { link = 'Noise' },
  rustSigil                           = { link = 'Noise' },
  rustStorage                         = { link = 'Keyword' },
  rustStructure                       = { link = 'Return' },
  rustTrait                           = { link = 'Include' },
  rustTypedef                         = { link = 'Noise' },
  shDerefSimple                       = { link = 'Todo' },
  shDo                                = { link = 'Noise' },
  shDoubleQuote                       = { link = 'String' },
  shEcho                              = { link = 'String' },
  shQuote                             = { link = 'shDoubleQuote' },
  shStatement                         = { link = 'Include' },
  shTestOpr                           = { link = 'Noise' },
  shVar                               = { link = 'Boolean' },
  shVarAssign                         = { link = 'luaBraces' },
  shWrapLineOperator                  = { link = 'Number' },
  tmuxAssignment                      = { link = 'luaBraces' },
  tmuxFlags                           = { link = 'Noise' },
  tmuxFormatString                    = { link = 'Todo' },
  tmuxOptions                         = { link = 'Title' },
  tmuxString                          = { link = 'Todo' },
  tmuxVariableExpansion               = { link = 'Return' },
  tmuxVariableExtension               = { link = 'Todo' },
  tsxAttrib                           = { link = 'Todo' },
  tsxCloseComponentName               = { link = 'Keyword' },
  tsxCloseString                      = { link = 'luaBraces' },
  tsxCloseTag                         = { link = 'Keyword' },
  tsxCloseTagName                     = { link = 'Keyword' },
  tsxEqual                            = { link = 'luaBraces' },
  tsxEscJs                            = { link = 'Title' },
  tsxIntrinsicTagName                 = { link = 'Keyword' },
  tsxJsBlock                          = { link = 'Title' },
  tsxRegion                           = { link = 'Title' },
  tsxString                           = { link = 'String' },
  tsxTag                              = { link = 'luaBraces' },
  tsxTagName                          = { link = 'Keyword' },
  txsRegion                           = { link = 'luaBraces' },
  typescriptArray                     = { link = 'Title' },
  typescriptArrayMethod               = { link = 'Include' },
  typescriptArrowFunc                 = { link = 'luaBraces' },
  typescriptArrowFuncArg              = { link = 'Title' },
  typescriptAssign                    = { link = 'luaBraces' },
  typescriptAsyncFuncKeyword          = { link = 'Noise' },
  typescriptBOM                       = { link = 'Title' },
  typescriptBOMHistoryProp            = { link = 'Character' },
  typescriptBOMLocationMethod         = { link = 'Macro' },
  typescriptBOMWindowMethod           = { link = 'jsOperatorKeyword' },
  typescriptBOMWindowProp             = { link = 'Character' },
  typescriptBinaryOp                  = { link = 'Tag' },
  typescriptBlock                     = { link = 'Cursor' },
  typescriptBraces                    = { link = 'luaBraces' },
  typescriptCall                      = { link = 'Todo' },
  typescriptConditional               = { link = 'Keyword' },
  typescriptConditionalParen          = { link = 'Title' },
  typescriptDOMDocProp                = { link = 'Character' },
  typescriptDOMWindowProp             = { link = 'Character' },
  typescriptDefault                   = { link = 'Return' },
  typescriptDestructureVariable       = { link = 'Title' },
  typescriptDomDocProp                = { link = 'Character' },
  typescriptDotNotation               = { link = 'Noise' },
  typescriptEndColumns                = { link = 'luaBraces' },
  typescriptEnum                      = { link = 'Title' },
  typescriptEnumKeyword               = { link = 'Macro' },
  typescriptExceptions                = { link = 'cssTagName' },
  typescriptExport                    = { link = 'Keyword' },
  typescriptFileReaderProp            = { link = 'Character' },
  typescriptFuncCallArg               = { link = 'Keyword' },
  typescriptFuncComma                 = { link = 'luaBraces' },
  typescriptFuncImpl                  = { link = 'luaBraces' },
  typescriptFuncKeyword               = { link = 'Keyword' },
  typescriptFuncName                  = { link = 'Cursor' },
  typescriptFuncTypeArrow             = { link = 'luaBraces' },
  typescriptGlobal                    = { link = 'Boolean' },
  typescriptHeadersMethod             = { link = 'Macro' },
  typescriptIdentifierName            = { link = 'Noise' },
  typescriptImport                    = { link = 'Keyword' },
  typescriptJSONStaticMethod          = { link = 'Character' },
  typescriptMathStaticMethod          = { link = 'KeywordReturn' },
  typescriptNull                      = { link = 'Noise' },
  typescriptObjectColon               = { link = 'luaBraces' },
  typescriptObjectLabel               = { link = 'Todo' },
  typescriptObjectLiteral             = { link = 'Macro' },
  typescriptOperator                  = { link = 'Return' },
  typescriptParenExp                  = { link = 'Title' },
  typescriptParens                    = { link = 'luaBraces' },
  typescriptPaymentShippingOptionProp = { link = 'Character' },
  typescriptProp                      = { link = 'Character' },
  typescriptProperty                  = { link = 'Character' },
  typescriptResponseProp              = { link = 'Character' },
  typescriptStatementKeyword          = { link = 'Return' },
  typescriptStringMethod              = { link = 'Macro' },
  typescriptTemplate                  = { link = 'Noise' },
  typescriptTemplateSB                = { fg = colour.amber },
  typescriptTemplateSubstitution      = { link = 'Todo' },
  typescriptTernary                   = { link = 'Todo' },
  typescriptTernaryOp                 = { link = 'Noise' },
  typescriptTry                       = { link = 'cssTagName' },
  typescriptTypeAnnotation            = { link = 'luaBraces' },
  typescriptTypeBrackets              = { link = 'luaBraces' },
  typescriptTypeCase                  = { link = 'Macro' },
  typescriptTypeReference             = { link = 'Return' },
  typescriptURLUtilsProp              = { link = 'Character' },
  typescriptUnaryOp                   = { link = 'noise' },
  typescriptVariable                  = { link = 'Keyword' },
  typescriptVariableDeclaration       = { link = 'Normal' },
  typescriptXHRMethod                 = { link = 'Macro' },
  variable                            = { link = 'Title' },
  vimEnvvar                           = { link = 'Noise' },
  vimOper                             = { link = 'Noise' },
  vimOperParen                        = { link = 'luaBraces' },
  vimUserFunc                         = { link = 'Noise' },
  vimVar                              = { link = 'Todo' },
  xmlEndTag                           = { link = 'Include' },
  zshBrackets                         = { link = 'luaBraces' },
  zshCommands                         = { link = 'Macro' },
  zshDeref                            = { link = 'Todo' },
  zshFunction                         = { link = 'Function' },
  zshKeyword                          = { link = 'Title' },
  zshLineNr                           = { link = 'luaBraces' },
  zshNumber                           = { link = 'Number' },
  zshOptStart                         = { link = 'Include' },
  zshOption                           = { link = 'Include' },
  zshParentheses                      = { link = 'LineNr' },
  zshPrecommand                       = { link = 'Macro' },
  zshRedirect                         = { link = 'Todo' },
  zshShortDeref                       = { link = 'Tag' },
  zshString                           = { link = 'String' },
  zshStringDelimiter                  = { link = 'String' },
  zshSubst                            = { link = 'luaBraces' },
  zshSubstDelim                       = { link = 'Tag' },
  zshTodo                             = { link = 'Todo' },
  zslhComment                         = { link = 'Comment' },
}
