local function highlight(group, styles)
  local gui = styles.gui and 'gui=' .. styles.gui or 'gui=NONE'
  local sp = styles.sp and 'guisp=' .. styles.sp or 'guisp=NONE'
  local fg = styles.fg and 'guifg=' .. styles.fg or 'guifg=NONE'
  local bg = styles.bg and 'guibg=' .. styles.bg or 'guibg=NONE'
  vim.api.nvim_command('highlight ' .. group .. ' ' .. gui .. ' ' .. sp .. ' ' .. fg .. ' ' .. bg)
end

local zero_dark  = '#111119'
local deep_blue  = '#1E202D'
local deep       = '#303040'
local death      = '#3B4267'
local navy       = '#405080'
local lagoon     = '#6070C1'
local pale_blue  = '#7AA7FF'
local magenta    = '#CBA6F7'
local mauve      = '#734a80'
local rouge      = '#883355'
local yellow     = '#F2CDCD'
local orange     = '#DB9280'
local clover     = '#597a69'
local green      = '#5F875F'
local pale_green = '#9EBFBF'
local grey       = '#676E96' --> #8585AA
local polar      = '#6E7694' --> #9FA7CF

local editor_syntax = {
  Cursor                  = { fg = polar, bg = rouge },
  CursorLine              = { bg = deep_blue },
  ColorColumn             = { fg = "NONE", bg = "NONE" },
  CursorLineNr            = { fg = pale_blue, bg = deep_blue },
  Directory               = { fg = navy, gui = 'bold' },
  variable                = { fg = polar },
  field                   = { fg = polar },
  DiffAdd                 = { fg = pale_green },
  DiffChange              = { fg = death },
  DiffDelete              = { fg = rouge },
  DiffText                = { fg = lagoon },
  ErrorMsg                = { fg = rouge },
  EndOfBuffer             = { fg = zero_dark, bg = zero_dark },
  VertSplit               = { fg = death, bg = zero_dark },
  Folded                  = { fg = death, gui = 'bold,italic' },
  FoldColumn              = { fg = mauve },
  SignColumn              = { fg = yellow },
  IncSearch               = { fg = magenta, bg = lagoon, gui = 'bold' },
  Substitute              = { fg = polar, bg = rouge },
  LineNr                  = { fg = death },
  MatchParen              = { fg = rouge, gui = 'bold' },
  Normal                  = { fg = polar, bg = zero_dark },
  NormalFloat             = { bg = zero_dark },
  Pmenu                   = { fg = polar, bg = zero_dark },
  PmenuSel                = { fg = pale_blue, bg = deep_blue, gui = 'bold' },
  PmenuSbar               = { fg = polar },
  PmenuThumb              = { fg = rouge, bg = rouge },
  TabLine                 = { fg = polar, bg = rouge },
  TabLineFill             = { fg = polar, bg = death },
  TabLineSel              = { fg = zero_dark, bg = deep_blue, gui = 'bold' },
  Search                  = { fg = polar, bg = navy },
  SpecialKey              = { fg = lagoon },
  SpellBad                = { fg = rouge, gui = 'bold' },
  SpellRare               = { fg = lagoon, gui = 'bold' },
  SpellCap                = { fg = yellow, gui = 'bold' },
  SpellLocal              = { fg = orange, gui = 'bold' },
  Title                   = { fg = polar },
  Visual                  = { fg = polar, bg = navy },
  VisualNOS               = { fg = polar, bg = rouge },
  WarningMsg              = { fg = yellow, gui = 'none' },
  Whitespace              = { fg = pale_blue },
  FloatBorder             = { fg = deep },
  FloatShadow             = { bg = "NONE" },
  FloatShadowThrough      = { bg = "NONE" },
  constructor             = { fg = polar, gui = 'bold' },
  Builtin                 = { fg = polar },
  Return                  = { fg = clover, gui = 'bold' },
  gitcommitComment        = { fg = death, gui = 'none' },
  gitcommitUntracked      = { fg = death, gui = 'none' },
  gitcommitDiscarded      = { fg = death, gui = 'none' },
  gitcommitSelected       = { fg = death, gui = 'none' },
  gitcommitBranch         = { fg = magenta, gui = 'bold' },
  gitcommitNoBranch       = { fg = magenta },
  gitcommitDiscardedType  = { fg = rouge },
  gitcommitDiscardedFile  = { fg = rouge },
  gitcommitDiscardedArrow = { fg = rouge },
  gitcommitOverflow       = { fg = rouge },
  gitcommitUntrackedFile  = { fg = lagoon },
  gitcommitUnmerged       = { fg = green },
  gitcommitSelectedFile   = { fg = green },
  gitcommitSelectedType   = { fg = green },
  gitcommitSelectedArrow  = { fg = green },
  gitcommitUnmergedFile   = { fg = yellow },
  gitcommitUnmergedArrow  = { fg = yellow },
  gitcommitSummary        = { fg = polar },
  gitcommitOnBranch       = {},
  gitcommitHeader         = {},
  gitcommitFile           = {},
  Conceal                 = {},
  ModeMsg                 = {},
  MsgArea                 = {},
  MsgSeparator            = {},
  MoreMsg                 = {},
  NonText                 = {},
  Question                = {},
  QuickFixLine            = {},
  StatusLine              = {},
  StatusLineNC            = {},
  WildMenu                = {}
}

for group, styles in pairs(editor_syntax) do
  highlight(group, styles)
end

local code_syntax = {
  Boolean                    = { fg = mauve, gui = 'none' },
  Character                  = editor_syntax.constructor,
  Command                    = editor_syntax.DiffText,
  Comment                    = editor_syntax.Folded,
  Conditional                = { fg = lagoon },
  Constant                   = editor_syntax.DiffText,
  Debug                      = editor_syntax.DiffDelete,
  Define                     = editor_syntax.DiffText,
  Delimiter                  = editor_syntax.LineNr,
  Error                      = editor_syntax.ErrorMsg,
  Exception                  = { fg = lagoon, gui = 'bold' },
  Function                   = editor_syntax.constructor,
  Field                      = editor_syntax.variable,
  Float                      = editor_syntax.gitcommitBranch,
  Identifier                 = editor_syntax.variable,
  Ignore                     = editor_syntax.DiffChange,
  Include                    = { fg = lagoon, gui = 'bold' },
  KeywordFunction            = editor_syntax.DiffText,
  KeywordReturn              = { fg = green, gui = 'italic' },
  Label                      = editor_syntax.DiffText,
  Macro                      = { fg = lagoon, gui = 'NONE' },
  Noise                      = { fg = rouge },
  Number                     = { fg = magenta, gui = 'bold' },
  NvimInternalError          = editor_syntax.ErrorMsg,
  Operator                   = { fg = yellow },
  PreCondit                  = editor_syntax.DiffChange,
  PreProc                    = { fg = grey },
  Repeat                     = editor_syntax.Return,
  Special                    = { fg = lagoon, gui = 'none' },
  SpecialChar                = editor_syntax.ErrorMsg,
  SpecialComment             = { fg = death, gui = 'bold' },
  Statement                  = { fg = lagoon, gui = 'bold' },
  StorageClass               = { fg = rouge, gui = 'none' },
  String                     = { fg = pale_green, gui = 'italic' },
  Structure                  = { fg = polar, gui = 'none' },
  Tag                        = { fg = orange },
  TelescopeBorder            = editor_syntax.FloatBorder,
  TelescopeSelection         = editor_syntax.PmenuSel,
  TelescopeSelectionCaret    = { fg = rouge, bg = deep_blue, gui = 'bold' },
  TelescopeMatching          = { fg = magenta, gui = 'bold' },
  TelescopePreviewMatch      = editor_syntax.MatchParen,
  TelescopePromptTitle       = { fg = navy },
  TelescopePromptPrefix      = { fg = rouge },
  Todo                       = { fg = pale_blue, gui = 'bold' },
  Type                       = { fg = pale_green, gui = 'bold' },
  Typedef                    = editor_syntax.DiffChange,
  Underlined                 = { gui = 'underline' },
  htmlEndTag                 = editor_syntax.LineNr,
  htmlTag                    = editor_syntax.LineNr,
  htmlHead                   = editor_syntax.DiffText,
  htmlTagN                   = { fg = navy, gui = 'bold' },
  htmlTagName                = { fg = navy, gui = 'bold' },
  htmlSpecialTagName         = { fg = navy },
  htmlArg                    = editor_syntax.LineNr,
  keyword                    = editor_syntax.Directory,
  DiagnosticWarn             = { fg = orange, gui = 'none' },
  DiagnosticInfo             = { fg = pale_blue, gui = 'none' },
  DiagnosticHint             = { fg = yellow, gui = 'bold' },
  DiagnosticError            = { fg = rouge, gui = 'bold' },
  DiagnosticUnderlineError   = { fg = rouge, gui = 'bold' },
  DiagnosticVirtualTextError = { fg = rouge, gui = 'bold' },
  DiagnosticUnderlineWarn    = { fg = orange, gui = 'none' },
  DiagnosticUnderlineInfo    = { fg = pale_blue, gui = 'none' },
  DiagnosticUnderlineHint    = { fg = yellow, gui = 'none' },
  DiagnosticVirtualTextInfo  = { fg = pale_blue, gui = 'none' },
  DiagnosticVirtualTextWarn  = { fg = orange, gui = 'none' },
  DiagnosticVirtualTextHint  = { fg = yellow, gui = 'none' },
}

for group, styles in pairs(code_syntax) do
  highlight(group, styles)
end

--> Plugin Highlight Groups
local plugin_syntax = {
  GitGutterAdd          = editor_syntax.gitcommitUnmerged,
  GitGutterChange       = editor_syntax.LineNr,
  GitGutterDelete       = editor_syntax.DiffDelete,
  GitGutterChangeDelete = { fg = orange },
  diffAdded             = editor_syntax.gitcommitUnmerged,
  diffRemoved           = editor_syntax.DiffDelete,
  NotifyERRORBorder     = editor_syntax.ErrorMsg,
  NotifyWARNBorder      = editor_syntax.FoldColumn,
  NotifyINFOBorder      = { fg = clover },
  NotifyDEBUGBorder     = { fg = grey },
  NotifyTRACEBorder     = { fg = mauve },
  NotifyERRORIcon       = editor_syntax.DiffDelete,
  NotifyWARNIcon        = editor_syntax.Tag,
  NotifyINFOIcon        = editor_syntax.DiffAdd,
  NotifyDEBUGIcon       = { fg = grey },
  NotifyDEBUGTitle      = { fg = grey },
  NotifyTRACEIcon       = editor_syntax.gitcommitNoBranch,
  NotifyERRORTitle      = editor_syntax.DiffDelete,
  NotifyWARNTitle       = editor_syntax.Tag,
  NotifyINFOTitle       = editor_syntax.DiffAdd,
  NotifyTRACETitle      = editor_syntax.gitcommitNoBranch,
  NotifyERRORBody       = editor_syntax.Normal,
  NotifyWARNBody        = editor_syntax.Normal,
  NotifyINFOBody        = editor_syntax.Normal,
  NotifyDEBUGBody       = editor_syntax.Normal,
  NotifyTRACEBody       = editor_syntax.Normal,
}

for group, styles in pairs(plugin_syntax) do
  highlight(group, styles)
end

local lang_syntax = {
  xmlEndTag                      = { fg = lagoon, gui = 'bold' },
  luaBraces                      = editor_syntax.LineNr,
  luaBuiltIn                     = editor_syntax.DiffText,
  luaComma                       = editor_syntax.LineNr,
  luaConstant                    = editor_syntax.gitcommitBranch,
  luaFunc                        = editor_syntax.DiffText,
  luaFuncArgsComma               = editor_syntax.LineNr,
  luaFuncCall                    = editor_syntax.Directory,
  mkdNonListItemBlock            = editor_syntax.Folded,
  luaFuncName                    = editor_syntax.constructor,
  luaFuncParens                  = editor_syntax.LineNr,
  luaFunction                    = { fg = lagoon, gui = 'none' },
  luaFunctionBlock               = { fg = lagoon, gui = 'bold' },
  luaIn                          = { fg = lagoon, gui = 'bold' },
  luaKeyword                     = editor_syntax.Return,
  luaLocal                       = { fg = green, gui = 'none' },
  luaParen                       = editor_syntax.LineNr,
  luaParens                      = editor_syntax.LineNr,
  luaSpecialValue                = editor_syntax.Directory,
  luaStatement                   = editor_syntax.Return,
  luaString                      = code_syntax.String,
  luaStringLongTag               = { fg = death, gui = 'bold' },
  luaSymbolOperator              = editor_syntax.LineNr,
  luaTable                       = editor_syntax.LineNr,
  luaTableBlock                  = editor_syntax.LineNr,
  FidgetTitle                    = { fg = pale_blue, bg = zero_dark },
  tmuxFormatString               = { fg = pale_blue, gui = 'none' },
  tmuxOptions                    = editor_syntax.variable,
  tmuxAssignment                 = editor_syntax.LineNr,
  tmuxFlags                      = editor_syntax.ErrorMsg,
  tmuxVariableExtension          = { fg = rouge },
  shDo                           = editor_syntax.ErrorMsg,
  shQuote                        = { fg = orange },
  shStatement                    = editor_syntax.htmlTagN,
  shTestOpr                      = editor_syntax.ErrorMsg,
  shVar                          = { fg = pale_blue, gui = 'none' },
  shEcho                         = { fg = pale_green, gui = 'italic' },
  shVarAssign                    = editor_syntax.LineNr,
  zshCommands                    = editor_syntax.DiffText,
  zshFunction                    = editor_syntax.WarningMsg,
  zshKeyword                     = code_syntax.Function,
  zshNumber                      = code_syntax.Number,
  zshOptStart                    = { fg = lagoon, gui = 'bold' },
  zshOption                      = { fg = lagoon, gui = 'bold' },
  zshPreProc                     = code_syntax.PreProc,
  zshPrecommand                  = editor_syntax.DiffText,
  zshString                      = code_syntax.String,
  zshSubst                       = editor_syntax.DiffChange,
  zshSubstDelim                  = { fg = orange },
  zshTodo                        = code_syntax.Todo,
  zslhComment                    = code_syntax.Comment,
  zshStringDelimiter             = code_syntax.String,
  zshParentheses                 = { fg = mauve },
  zshDeref                       = editor_syntax.Whitespace,
  shDerefSimple                  = { fg = orange },
  shDoubleQuote                  = { fg = orange },
  rustAssert                     = editor_syntax.ErrorMsg,
  rustBoxPlacementBalance        = editor_syntax.ErrorMsg,
  rustFoldBraces                 = editor_syntax.LineNr,
  rustEnumVariant                = editor_syntax.field,
  rustFuncCall                   = editor_syntax.field,
  rustRepeat                     = editor_syntax.Directory,
  rustKeyword                    = editor_syntax.Directory,
  rustConditional                = editor_syntax.Directory,
  rustFuncName                   = editor_syntax.constructor,
  rustCharacter                  = editor_syntax.ErrorMsg,
  rustIdentifier                 = editor_syntax.variable,
  rustMacro                      = editor_syntax.Return,
  rustModPath                    = editor_syntax.Return,
  rustModPathSep                 = editor_syntax.LineNr,
  rustOperator                   = editor_syntax.LineNr,
  rustSelf                       = editor_syntax.ErrorMsg,
  rustSigil                      = editor_syntax.ErrorMsg,
  rustStorage                    = editor_syntax.Directory,
  rustStructure                  = editor_syntax.Return,
  rustTrait                      = editor_syntax.htmlTagN,
  rustTypedef                    = editor_syntax.ErrorMsg,
  muttrcSetStrAssignment         = editor_syntax.ErrorMsg,
  jsFunction                     = editor_syntax.DiffText,
  jsImport                       = editor_syntax.DiffText,
  jsStorageClass                 = editor_syntax.DiffText,
  jsExport                       = editor_syntax.DiffText,
  jsGlobalObjects                = editor_syntax.Directory,
  jsFuncName                     = editor_syntax.constructor,
  jsFrom                         = { fg = lagoon, gui = 'bold' },
  jsParen                        = editor_syntax.LineNr,
  jsAsyncKeyword                 = { fg = lagoon, gui = 'bold' },
  jsForAwait                     = { fg = lagoon, gui = 'bold' },
  jsArrowFunction                = editor_syntax.LineNr,
  jsReturn                       = editor_syntax.Return,
  jsFuncBlock                    = { fg = pale_blue, gui = 'bold' },
  jsParens                       = editor_syntax.LineNr,
  jsFuncCall                     = editor_syntax.constructor,
  jsFuncBraces                   = editor_syntax.LineNr,
  jsxTag                         = { fg = death },
  jsxExpressionBlock             = { fg = grey },
  jsxTagName                     = editor_syntax.Directory,
  jsxEqual                       = editor_syntax.LineNr,
  jsxOpenPunct                   = editor_syntax.LineNr,
  jsxClosePunct                  = editor_syntax.LineNr,
  jsxOpenTag                     = editor_syntax.LineNr,
  jsxComponentName               = editor_syntax.Directory,
  jsxAttrib                      = editor_syntax.Whitespace,
  jsxBraces                      = editor_syntax.LineNr,
  jsTemplateBraces               = editor_syntax.DiffDelete,
  jsFuncParens                   = editor_syntax.LineNr,
  jsModuleBraces                 = editor_syntax.LineNr,
  jsDestructuringBraces          = editor_syntax.LineNr,
  jsObjectBraces                 = editor_syntax.LineNr,
  jsObjectShorthandProp          = editor_syntax.LineNr,
  jsModuleComma                  = editor_syntax.LineNr,
  jsObject                       = editor_syntax.LineNr,
  jsBrackets                     = editor_syntax.LineNr,
  jsObjectColon                  = editor_syntax.LineNr,
  jsNoise                        = editor_syntax.LineNr,
  jsFuncArgs                     = editor_syntax.LineNr,
  jsFuncArgsCommas               = editor_syntax.LineNr,
  jsObjectKey                    = editor_syntax.Whitespace,
  jsNull                         = editor_syntax.gitcommitBranch,
  jsTernaryIf                    = editor_syntax.gitcommitBranch,
  jsTernaryOperator              = editor_syntax.gitcommitBranch,
  jsTemplateString               = editor_syntax.Comment,
  jsObjectSeparator              = editor_syntax.LineNr,
  jsObjectValue                  = editor_syntax.constructor,
  jsObjectObjectProp             = editor_syntax.gitcommitBranch,
  jsonQuote                      = { fg = navy },
  jsoncBraces                    = { fg = death },
  jsoncBoolean                   = { fg = mauve },
  CmpCompletionBorder            = editor_syntax.FloatBorder,
  CmpItemKindFunction            = editor_syntax.gitcommitBranch,
  CmpItemKindMethod              = editor_syntax.gitcommitBranch,
  CmpItemKindVariable            = editor_syntax.DiffAdd,
  CmpItemKindKeyword             = editor_syntax.DiffChange,
  CmpItemKindColor               = editor_syntax.variable,
  CmpItemKindConstant            = editor_syntax.DiffText,
  CmpItemKindDefault             = editor_syntax.DiffText,
  CmpItemKindFolder              = editor_syntax.Return,
  CmpItemKindOperator            = editor_syntax.variable,
  CmpItemKindProperty            = editor_syntax.gitcommitBranch,
  CmpItemMenu                    = { fg = pale_blue, bg = 'none' },
  CmpItemAbbrMatchDefault        = editor_syntax.gitcommitBranch,
  CmpItemAbbrMatch               = editor_syntax.gitcommitBranch,
  CmpItemAbbrMatchFuzzy          = editor_syntax.gitcommitBranch,
  CmpItemKindMatchFuzzy          = editor_syntax.gitcommitBranch,
  CmpItemAbbrMatchFuzzyDefault   = editor_syntax.gitcommitBranch,
  tsxAttrib                      = { fg = pale_blue },
  tsxCloseString                 = editor_syntax.LineNr,
  tsxCloseTag                    = editor_syntax.LineNr,
  tsxEqual                       = editor_syntax.LineNr,
  tsxRegion                      = { fg = polar, gui = 'none' },
  tsxTag                         = editor_syntax.LineNr,
  tsxString                      = editor_syntax.DiffAdd,
  tsxTagName                     = { fg = navy, gui = 'bold' },
  tsxIntrinsicTagName            = editor_syntax.htmlTagN,
  txsRegion                      = editor_syntax.LineNr,
  typescriptArray                = { fg = polar },
  typescriptNull                 = { fg = magenta, gui = 'bold' },
  typescriptFuncCallArg          = { fg = polar, gui = 'bold' },
  typescriptEnum                 = editor_syntax.field,
  typescriptEnumKeyword          = editor_syntax.DiffText,
  typescriptArrowFunc            = editor_syntax.LineNr,
  typescriptArrowFuncArg         = editor_syntax.Title,
  typescriptFuncTypeArrow        = editor_syntax.LineNr,
  typescriptFuncComma            = { fg = death },
  typescriptAssign               = editor_syntax.LineNr,
  typescriptAsyncFuncKeyword     = editor_syntax.Directory,
  typescriptBOM                  = editor_syntax.variable,
  typescriptBOMLocationMethod    = editor_syntax.DiffText,
  typescriptBOMWindowProp        = editor_syntax.DiffAdd,
  typescriptBlock                = { fg = polar, gui = 'none' },
  typescriptBraces               = editor_syntax.LineNr,
  typescriptFuncImpl             = editor_syntax.LineNr,
  typescriptDOMDocProp           = editor_syntax.DiffText,
  typescriptDOMWindowProp        = editor_syntax.DiffText,
  typescriptDestructureVariable  = editor_syntax.variable,
  typescriptDotNotation          = editor_syntax.ErrorMsg,
  typescriptExceptions           = editor_syntax.DiffText,
  typescriptExport               = editor_syntax.htmlTagN,
  typescriptFuncKeyword          = editor_syntax.Special,
  typescriptHeadersMethod        = editor_syntax.DiffText,
  typescriptImport               = editor_syntax.htmlTagN,
  typescriptObjectColon          = editor_syntax.LineNr,
  typescriptObjectLabel          = editor_syntax.Whitespace,
  typescriptObjectLiteral        = editor_syntax.LineNr,
  tsxEscJs                       = { fg = polar, gui = 'none' },
  typescriptTypeAnnotation       = editor_syntax.LineNr,
  typescriptOperator             = { fg = clover, gui = 'bold' },
  typescriptParens               = editor_syntax.LineNr,
  typescriptParenExp             = { fg = polar, gui = 'none' },
  typescriptProp                 = { fg = pale_blue },
  typescriptArrayMethod          = { fg = lagoon, gui = 'bold' },
  typescriptProperty             = editor_syntax.LineNr,
  typescriptResponseProp         = editor_syntax.DiffText,
  typescriptStatementKeyword     = editor_syntax.Return,
  typescriptStringMethod         = editor_syntax.DiffText,
  typescriptTemplate             = editor_syntax.Folded,
  typescriptTemplateSubstitution = { fg = pale_blue, gui = 'italic' },
  typescriptTemplateSB           = editor_syntax.DiffText,
  typescriptTernary              = editor_syntax.Return,
  typescriptTernaryOp            = { fg = orange },
  typescriptTry                  = editor_syntax.Directory,
  typescriptTypeBrackets         = editor_syntax.LineNr,
  typescriptUnaryOp              = { fg = orange },
  typescriptBinaryOp             = { fg = orange },
  typescriptVariable             = editor_syntax.DiffText,
  typescriptXHRMethod            = editor_syntax.DiffText,
  typescriptTypeReference        = { fg = clover, gui = 'bold' },
  typescriptTypeCase             = { fg = navy },
  typescriptIdentifierName       = { fg = polar, gui = 'none' },
  muttrcAliasEncEmail            = { fg = death },
  muttrcEmail                    = { fg = clover },
  markdownValid                  = { fg = death, gui = 'bold,italic' },
  muttrcAliasKey                 = { fg = mauve, gui = 'bold' },
  muttrcAliasNameNoParens        = { fg = polar, gui = 'bold' }
}

for group, styles in pairs(lang_syntax) do
  highlight(group, styles)
end
