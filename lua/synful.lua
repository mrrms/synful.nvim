local editor_syntax = {
  LineNr                  = { fg = vim.g.metal },
  CursorLineNr            = { fg = vim.g.capri, bg = vim.g.raven },
  CursorLine              = { bg = vim.g.raven },
  Cursor                  = { fg = vim.g.pearl, bg = vim.g.rouge },
  ColorColumn             = { fg = "none", bg = "none" },
  Normal                  = { fg = vim.g.pearl, bg = vim.g.space },
  Directory               = { fg = vim.g.steel, bold = true },
  variable                = { fg = vim.g.pearl },
  field                   = { fg = vim.g.pearl },
  DiffAdd                 = { fg = vim.g.paris },
  DiffChange              = { fg = vim.g.metal },
  DiffDelete              = { fg = vim.g.rouge },
  DiffText                = { fg = vim.g.royal },
  ErrorMsg                = { fg = vim.g.rouge },
  EndOfBuffer             = { fg = vim.g.space, bg = vim.g.space },
  VertSplit               = { fg = vim.g.metal, bg = vim.g.space },
  Folded                  = { fg = vim.g.mauve, italic = true },
  FoldColumn              = { fg = vim.g.mauve },
  SignColumn              = { fg = vim.g.peach },
  IncSearch               = { fg = vim.g.ultra, bg = vim.g.royal, bold = true },
  Substitute              = { fg = vim.g.pearl, bg = vim.g.rouge },
  MatchParen              = { fg = vim.g.rouge, bold = true },
  NormalFloat             = { fg = vim.g.slate, bg = vim.g.space, },
  Pmenu                   = { fg = vim.g.pearl, bg = vim.g.space },
  PmenuSel                = { fg = vim.g.capri, bg = vim.g.raven, bold = true },
  PmenuSbar               = { fg = vim.g.pearl },
  PmenuThumb              = { fg = vim.g.rouge, bg = vim.g.rouge },
  TabLine                 = { fg = vim.g.pearl, bg = vim.g.rouge },
  TabLineFill             = { fg = vim.g.pearl, bg = vim.g.metal },
  TabLineSel              = { fg = vim.g.space, bg = vim.g.raven, bold = true },
  Search                  = { fg = vim.g.pearl, bg = vim.g.royal },
  SpecialKey              = { fg = vim.g.royal },
  SpellBad                = { fg = vim.g.rouge, bold = true },
  SpellRare               = { fg = vim.g.royal, bold = true },
  SpellCap                = { fg = vim.g.peach, bold = true },
  SpellLocal              = { fg = vim.g.amber, bold = true },
  Title                   = { fg = vim.g.pearl },
  Visual                  = { fg = vim.g.pearl, bg = vim.g.royal },
  VisualNOS               = { fg = vim.g.pearl, bg = vim.g.rouge },
  WarningMsg              = { fg = vim.g.peach },
  Whitespace              = { fg = vim.g.capri },
  FloatBorder             = { fg = vim.g.raven },
  FloatShadow             = { bg = "NONE" },
  FloatShadowThrough      = { bg = "NONE" },
  constructor             = { fg = vim.g.pearl, bold = true },
  Builtin                 = { fg = vim.g.pearl },
  Return                  = { fg = vim.g.bazil, bold = true },
  gitcommitComment        = { fg = vim.g.metal },
  gitcommitUntracked      = { fg = vim.g.metal },
  gitcommitDiscarded      = { fg = vim.g.metal },
  gitcommitSelected       = { fg = vim.g.metal },
  gitcommitBranch         = { fg = vim.g.ultra, bold = true },
  gitcommitNoBranch       = { fg = vim.g.ultra },
  gitcommitDiscardedType  = { fg = vim.g.rouge },
  gitcommitDiscardedFile  = { fg = vim.g.rouge },
  gitcommitDiscardedArrow = { fg = vim.g.rouge },
  gitcommitOverflow       = { fg = vim.g.rouge },
  gitcommitUntrackedFile  = { fg = vim.g.royal },
  gitcommitUnmerged       = { fg = vim.g.olive },
  gitcommitSelectedFile   = { fg = vim.g.olive },
  gitcommitSelectedType   = { fg = vim.g.olive },
  gitcommitSelectedArrow  = { fg = vim.g.olive },
  gitcommitUnmergedFile   = { fg = vim.g.peach },
  gitcommitUnmergedArrow  = { fg = vim.g.peach },
  gitcommitSummary        = { fg = vim.g.pearl },
  gitcommitOnBranch       = {},
  gitcommitHeader         = {},
  gitcommitFile           = {},
  Conceal                 = {},
  ModeMsg                 = {},
  MsgArea                 = {},
  MsgSeparator            = {},
  MoreMsg                 = {},
  NonText                 = {},
  Question                = {},
  QuickFixLine            = {},
  StatusLine              = {},
  StatusLineNC            = {},
  WildMenu                = {}
}

for group, hl in pairs(editor_syntax) do
  vim.api.nvim_set_hl(0, tostring(group), hl)
end


local code_syntax = {
  Boolean                    = { fg = vim.g.mauve },
  Character                  = { link = 'constructor' },
  Command                    = { link = 'DiffText' },
  Comment                    = { fg = vim.g.metal, bold = true, italic = true },
  Conditional                = { fg = vim.g.royal },
  Constant                   = { link = 'DiffText' },
  Debug                      = { link = 'DiffDelete' },
  Define                     = { link = 'DiffText' },
  Delimiter                  = { link = 'LineNr' },
  Error                      = { link = 'ErrorMsg' },
  Exception                  = { fg = vim.g.royal, bold = true },
  Function                   = { link = 'constructor' },
  Field                      = { link = 'variable' },
  Float                      = { link = 'gitcommitBranch' },
  Identifier                 = { link = 'variable' },
  Ignore                     = { link = 'DiffChange' },
  Include                    = { fg = vim.g.royal, bold = true },
  KeywordFunction            = { link = 'DiffText' },
  KeywordReturn              = { fg = vim.g.olive, italic = true },
  Label                      = { link = 'DiffText' },
  Macro                      = { fg = vim.g.royal },
  Noise                      = { fg = vim.g.rouge },
  Number                     = { fg = vim.g.ultra, bold = true },
  NvimInternalError          = { link = 'ErrorMsg' },
  Operator                   = { fg = vim.g.peach },
  PreCondit                  = { link = 'DiffChange' },
  PreProc                    = { fg = vim.g.slate },
  Repeat                     = { link = 'Return' },
  Special                    = { fg = vim.g.royal },
  SpecialChar                = { link = 'ErrorMsg' },
  SpecialComment             = { fg = vim.g.metal, bold = true },
  Statement                  = { fg = vim.g.royal, bold = true },
  StorageClass               = { fg = vim.g.rouge },
  String                     = { fg = vim.g.paris, italic = true },
  Structure                  = { fg = vim.g.pearl },
  Tag                        = { fg = vim.g.amber },
  TelescopeBorder            = { link = 'FloatBorder' },
  TelescopeSelection         = { link = 'PmenuSel' },
  TelescopeSelectionCaret    = { fg = vim.g.rouge, bg = vim.g.raven, bold = true },
  TelescopeMatching          = { fg = vim.g.ultra, bold = true },
  TelescopePreviewMatch      = { link = 'MatchParen' },
  TelescopePromptTitle       = { fg = vim.g.royal },
  TelescopePromptPrefix      = { fg = vim.g.rouge },
  Todo                       = { fg = vim.g.capri, bold = true },
  Type                       = { fg = vim.g.paris, bold = true },
  Typedef                    = { link = 'DiffChange' },
  Underlined                 = { underline = true },
  htmlEndTag                 = { link = 'LineNr' },
  htmlTag                    = { link = 'LineNr' },
  htmlHead                   = { link = 'DiffText' },
  htmlTagN                   = { fg = vim.g.royal, bold = true },
  htmlTagName                = { fg = vim.g.royal, bold = true },
  htmlSpecialTagName         = { fg = vim.g.royal },
  htmlArg                    = { link = 'LineNr' },
  keyword                    = { link = 'Directory' },
  DiagnosticWarn             = { fg = vim.g.amber },
  DiagnosticInfo             = { fg = vim.g.capri },
  DiagnosticHint             = { fg = vim.g.peach, bold = true },
  DiagnosticError            = { fg = vim.g.rouge, bold = true },
  DiagnosticUnderlineError   = { fg = vim.g.rouge, bold = true },
  DiagnosticVirtualTextError = { fg = vim.g.rouge, bold = true },
  DiagnosticUnderlineWarn    = { fg = vim.g.amber },
  DiagnosticUnderlineInfo    = { fg = vim.g.capri },
  DiagnosticUnderlineHint    = { fg = vim.g.peach },
  DiagnosticVirtualTextInfo  = { fg = vim.g.capri },
  DiagnosticVirtualTextWarn  = { fg = vim.g.amber },
  DiagnosticVirtualTextHint  = { fg = vim.g.peach },
}

for group, hl in pairs(code_syntax) do
  vim.api.nvim_set_hl(0, tostring(group), hl)
end

--> Plugin Highlight Groups
local plugin_syntax = {
  GitGutterAdd                 = { link = 'gitcommitUnmerged' },
  GitGutterChange              = { link = 'LineNr' },
  GitGutterDelete              = { link = 'DiffDelete' },
  GitGutterChangeDelete        = { fg = vim.g.amber },
  diffAdded                    = { link = 'gitcommitUnmerged' },
  diffRemoved                  = { link = 'DiffDelete' },
  NotifyERRORBorder            = { link = 'ErrorMsg' },
  NotifyWARNBorder             = { link = 'FoldColumn' },
  NotifyINFOBorder             = { fg = vim.g.bazil },
  NotifyDEBUGBorder            = { fg = vim.g.slate },
  NotifyTRACEBorder            = { fg = vim.g.mauve },
  NotifyERRORIcon              = { link = 'DiffDelete' },
  NotifyWARNIcon               = { link = 'Tag' },
  NotifyINFOIcon               = { link = 'DiffAdd' },
  NotifyDEBUGIcon              = { fg = vim.g.slate },
  NotifyDEBUGTitle             = { fg = vim.g.slate },
  NotifyTRACEIcon              = { link = 'gitcommitNoBranch' },
  NotifyERRORTitle             = { link = 'DiffDelete' },
  NotifyWARNTitle              = { link = 'Tag' },
  NotifyINFOTitle              = { link = 'DiffAdd' },
  NotifyTRACETitle             = { link = 'gitcommitNoBranch' },
  NotifyERRORBody              = { link = 'Normal' },
  NotifyWARNBody               = { link = 'Normal' },
  NotifyINFOBody               = { link = 'Normal' },
  NotifyDEBUGBody              = { link = 'Normal' },
  NotifyTRACEBody              = { link = 'Normal' },
  FidgetTitle                  = { fg = vim.g.capri, bg = vim.g.space },
  tmuxFormatString             = { fg = vim.g.capri },
  tmuxOptions                  = { link = 'variable' },
  tmuxAssignment               = { link = 'LineNr' },
  tmuxFlags                    = { link = 'ErrorMsg' },
  tmuxVariableExtension        = { fg = vim.g.amber },
  muttrcSetStrAssignment       = { link = 'ErrorMsg' },
  CmpCompletionBorder          = { link = 'FloatBorder' },
  CmpItemKindFunction          = { link = 'gitcommitBranch' },
  CmpItemKindMethod            = { link = 'gitcommitBranch' },
  CmpItemKindVariable          = { link = 'DiffAdd' },
  CmpItemKindKeyword           = { link = 'DiffChange' },
  CmpItemKindColor             = { link = 'variable' },
  CmpItemKindConstant          = { link = 'DiffText' },
  CmpItemKindDefault           = { link = 'DiffText' },
  CmpItemKindFolder            = { link = 'Return' },
  CmpItemKindOperator          = { link = 'variable' },
  CmpItemKindProperty          = { link = 'gitcommitBranch' },
  CmpItemMenu                  = { fg = vim.g.capri, bg = 'none' },
  CmpItemAbbrMatchDefault      = { link = 'gitcommitBranch' },
  CmpItemAbbrMatch             = { link = 'gitcommitBranch' },
  CmpItemAbbrMatchFuzzy        = { link = 'gitcommitBranch' },
  CmpItemKindMatchFuzzy        = { link = 'gitcommitBranch' },
  CmpItemAbbrMatchFuzzyDefault = { link = 'gitcommitBranch' },
  muttrcAliasEncEmail          = { fg = vim.g.metal },
  muttrcEmail                  = { fg = vim.g.bazil },
  markdownValid                = { fg = vim.g.metal, bold = true, italic = true },
  muttrcAliasKey               = { fg = vim.g.mauve, bold = true },
  muttrcAliasNameNoParens      = { fg = vim.g.pearl, bold = true },
  WhichKey                     = { fg = vim.g.rouge },
  WhichKeyGroup                = { fg = vim.g.royal, bold = true },
  WhichKeySeparator            = { fg = vim.g.metal },
  WhichKeyDesc                 = { fg = vim.g.pearl },
  WhichKeyValue                = { fg = vim.g.amber, italic = true },
}

for group, hl in pairs(plugin_syntax) do
  vim.api.nvim_set_hl(0, tostring(group), hl)
end

local lang_syntax = {
  xmlEndTag                      = { fg = vim.g.royal, bold = true },
  luaBraces                      = { link = 'LineNr' },
  luaBuiltIn                     = { link = 'DiffText' },
  luaComma                       = { link = 'LineNr' },
  luaConstant                    = { link = 'gitcommitBranch' },
  luaFunc                        = { link = 'DiffText' },
  luaFuncArgsComma               = { link = 'LineNr' },
  luaFuncCall                    = { link = 'Directory' },
  mkdNonListItemBlock            = { link = 'Folded' },
  luaFuncName                    = { link = 'constructor' },
  luaFuncParens                  = { link = 'LineNr' },
  luaFunction                    = { fg = vim.g.royal },
  luaFunctionBlock               = { fg = vim.g.royal, bold = true },
  luaIn                          = { fg = vim.g.royal, bold = true },
  luaKeyword                     = { link = 'Return' },
  luaLocal                       = { fg = vim.g.olive, bold = true },
  luaParen                       = { link = 'LineNr' },
  luaParens                      = { link = 'LineNr' },
  luaSpecialValue                = { link = 'Directory' },
  luaStatement                   = { link = 'Return' },
  luaString                      = { link = 'String' },
  luaStringLongTag               = { fg = vim.g.metal, bold = true },
  luaSymbolOperator              = { link = 'LineNr' },
  luaTable                       = { link = 'LineNr' },
  luaTableBlock                  = { link = 'LineNr' },
  shDo                           = { link = 'ErrorMsg' },
  shQuote                        = { fg = vim.g.amber },
  shStatement                    = { link = 'htmlTagN' },
  shTestOpr                      = { link = 'ErrorMsg' },
  shVar                          = { fg = vim.g.capri },
  shEcho                         = { fg = vim.g.paris, italic = true },
  shVarAssign                    = { link = 'LineNr' },
  zshCommands                    = { link = 'DiffText' },
  zshFunction                    = { link = 'WarningMsg' },
  zshKeyword                     = { link = 'Function' },
  zshNumber                      = { link = 'Number' },
  zshOptStart                    = { fg = vim.g.royal, bold = true },
  zshOption                      = { fg = vim.g.royal, bold = true },
  zshPreProc                     = { link = 'PreProc' },
  zshPrecommand                  = { link = 'DiffText' },
  zshString                      = { link = 'String' },
  zshSubst                       = { link = 'DiffChange' },
  zshSubstDelim                  = { fg = vim.g.amber },
  zshTodo                        = { link = 'Todo' },
  zslhComment                    = { link = 'Comment' },
  zshStringDelimiter             = { link = 'String' },
  zshParentheses                 = { fg = vim.g.mauve },
  zshDeref                       = { link = 'Whitespace' },
  shDerefSimple                  = { fg = vim.g.amber },
  shDoubleQuote                  = { fg = vim.g.amber },
  rustAssert                     = { link = 'ErrorMsg' },
  rustBoxPlacementBalance        = { link = 'ErrorMsg' },
  rustFoldBraces                 = { link = 'LineNr' },
  rustEnumVariant                = { link = 'field' },
  rustFuncCall                   = { link = 'field' },
  rustRepeat                     = { link = 'Directory' },
  rustKeyword                    = { link = 'Directory' },
  rustConditional                = { link = 'Directory' },
  rustFuncName                   = { link = 'constructor' },
  rustCharacter                  = { link = 'ErrorMsg' },
  rustIdentifier                 = { link = 'variable' },
  rustMacro                      = { link = 'Return' },
  rustModPath                    = { link = 'Return' },
  rustModPathSep                 = { link = 'LineNr' },
  rustOperator                   = { link = 'LineNr' },
  rustSelf                       = { link = 'ErrorMsg' },
  rustSigil                      = { link = 'ErrorMsg' },
  rustStorage                    = { link = 'Directory' },
  rustStructure                  = { link = 'Return' },
  rustTrait                      = { link = 'htmlTagN' },
  rustTypedef                    = { link = 'ErrorMsg' },
  jsFunction                     = { link = 'DiffText' },
  jsImport                       = { link = 'DiffText' },
  jsStorageClass                 = { link = 'DiffText' },
  jsExport                       = { link = 'DiffText' },
  jsGlobalObjects                = { link = 'Directory' },
  jsFuncName                     = { link = 'constructor' },
  jsFrom                         = { fg = vim.g.royal, bold = true },
  jsParen                        = { link = 'LineNr' },
  jsAsyncKeyword                 = { fg = vim.g.royal, bold = true },
  jsForAwait                     = { fg = vim.g.royal, bold = true },
  jsArrowFunction                = { link = 'LineNr' },
  jsReturn                       = { link = 'Return' },
  jsFuncBlock                    = { fg = vim.g.capri, bold = true },
  jsParens                       = { link = 'LineNr' },
  jsFuncCall                     = { link = 'constructor' },
  jsFuncBraces                   = { link = 'LineNr' },
  jsxTag                         = { fg = vim.g.metal },
  jsxExpressionBlock             = { fg = vim.g.slate },
  jsxTagName                     = { link = 'Directory' },
  jsxEqual                       = { link = 'LineNr' },
  jsxOpenPunct                   = { link = 'LineNr' },
  jsxClosePunct                  = { link = 'LineNr' },
  jsxOpenTag                     = { link = 'LineNr' },
  jsxComponentName               = { link = 'Directory' },
  jsxAttrib                      = { link = 'Whitespace' },
  jsxBraces                      = { link = 'LineNr' },
  jsTemplateBraces               = { link = 'DiffDelete' },
  jsFuncParens                   = { link = 'LineNr' },
  jsModuleBraces                 = { link = 'LineNr' },
  jsDestructuringBraces          = { link = 'LineNr' },
  jsObjectBraces                 = { link = 'LineNr' },
  jsObjectShorthandProp          = { link = 'LineNr' },
  jsModuleComma                  = { link = 'LineNr' },
  jsObject                       = { link = 'LineNr' },
  jsBrackets                     = { link = 'LineNr' },
  jsObjectColon                  = { link = 'LineNr' },
  jsNoise                        = { link = 'LineNr' },
  jsFuncArgs                     = { link = 'LineNr' },
  jsFuncArgsCommas               = { link = 'LineNr' },
  jsObjectKey                    = { link = 'Whitespace' },
  jsNull                         = { link = 'gitcommitBranch' },
  jsTernaryIf                    = { link = 'gitcommitBranch' },
  jsTernaryOperator              = { link = 'gitcommitBranch' },
  jsTemplateString               = { link = 'Comment' },
  jsObjectSeparator              = { link = 'LineNr' },
  jsObjectValue                  = { link = 'constructor' },
  jsObjectObjectProp             = { link = 'gitcommitBranch' },
  jsonQuote                      = { fg = vim.g.royal },
  jsoncBraces                    = { fg = vim.g.metal },
  jsoncBoolean                   = { fg = vim.g.mauve },
  tsxAttrib                      = { fg = vim.g.capri },
  tsxCloseString                 = { link = 'LineNr' },
  tsxCloseTag                    = { link = 'LineNr' },
  tsxEqual                       = { link = 'LineNr' },
  tsxRegion                      = { fg = vim.g.pearl },
  tsxTag                         = { link = 'LineNr' },
  tsxString                      = { link = 'DiffAdd' },
  tsxTagName                     = { fg = vim.g.steel, bold = true },
  tsxCloseTagName                = { fg = vim.g.steel, bold = true },
  tsxIntrinsicTagName            = { link = 'htmlTagN' },
  tsxCloseComponentName          = { fg = vim.g.steel, bold = true },
  txsRegion                      = { link = 'LineNr' },
  typescriptArray                = { fg = vim.g.pearl },
  typescriptNull                 = { fg = vim.g.ultra, bold = true },
  typescriptFuncCallArg          = { fg = vim.g.pearl, bold = true },
  typescriptEnum                 = { link = 'field' },
  typescriptEnumKeyword          = { link = 'DiffText' },
  typescriptArrowFunc            = { link = 'LineNr' },
  typescriptArrowFuncArg         = { link = 'Title' },
  typescriptFuncTypeArrow        = { link = 'LineNr' },
  typescriptFuncComma            = { fg = vim.g.metal },
  typescriptAssign               = { link = 'LineNr' },
  typescriptAsyncFuncKeyword     = { link = 'Directory' },
  typescriptBOM                  = { link = 'variable' },
  typescriptBOMLocationMethod    = { link = 'DiffText' },
  typescriptBOMWindowProp        = { link = 'DiffAdd' },
  typescriptBlock                = { fg = vim.g.pearl },
  typescriptBraces               = { link = 'LineNr' },
  typescriptFuncImpl             = { link = 'LineNr' },
  typescriptDOMDocProp           = { link = 'DiffText' },
  typescriptDOMWindowProp        = { link = 'DiffText' },
  typescriptDestructureVariable  = { link = 'variable' },
  typescriptDotNotation          = { link = 'ErrorMsg' },
  typescriptExceptions           = { link = 'DiffText' },
  typescriptExport               = { link = 'htmlTagN' },
  typescriptFuncKeyword          = { link = 'Special' },
  typescriptHeadersMethod        = { link = 'DiffText' },
  typescriptImport               = { link = 'htmlTagN' },
  typescriptObjectColon          = { link = 'LineNr' },
  typescriptObjectLabel          = { link = 'Whitespace' },
  typescriptObjectLiteral        = { link = 'LineNr' },
  tsxEscJs                       = { fg = vim.g.pearl },
  typescriptTypeAnnotation       = { link = 'LineNr' },
  typescriptOperator             = { fg = vim.g.bazil, bold = true },
  typescriptParens               = { link = 'LineNr' },
  typescriptParenExp             = { fg = vim.g.pearl },
  typescriptProp                 = { fg = vim.g.capri },
  typescriptArrayMethod          = { fg = vim.g.royal, bold = true },
  typescriptProperty             = { link = 'LineNr' },
  typescriptResponseProp         = { link = 'DiffText' },
  typescriptStatementKeyword     = { link = 'Return' },
  typescriptStringMethod         = { link = 'DiffText' },
  typescriptTemplate             = { fg = vim.g.slate, italic = true },
  typescriptTemplateSubstitution = { fg = vim.g.capri, italic = true },
  typescriptTemplateSB           = { link = 'DiffText' },
  typescriptTernary              = { link = 'Return' },
  typescriptTernaryOp            = { fg = vim.g.amber },
  typescriptTry                  = { link = 'Directory' },
  typescriptTypeBrackets         = { link = 'LineNr' },
  typescriptUnaryOp              = { fg = vim.g.amber },
  typescriptBinaryOp             = { fg = vim.g.amber },
  typescriptVariable             = { link = 'DiffText' },
  typescriptXHRMethod            = { link = 'DiffText' },
  typescriptTypeReference        = { fg = vim.g.bazil, bold = true },
  typescriptTypeCase             = { fg = vim.g.royal },
  typescriptIdentifierName       = { fg = vim.g.pearl },
  mailHeader                     = { fg = vim.g.rouge },
  mailHeaderKey                  = { fg = vim.g.rouge },
}

for group, hl in pairs(lang_syntax) do
  vim.api.nvim_set_hl(0, tostring(group), hl)
end
